# Get all graph nodes and links
MATCH (n) 
MATCH (m) 
MATCH p=(n)-[:Influences*..]->(m) 
WITH *, relationships(p) AS relations 
RETURN [relation IN relations | [startNode(relation), (relation), endNode(relation)]] as data 

# Filter for influence area(s)
MATCH (n) 
MATCH (m) 
MATCH p=(n)-[r]->(m) 
WHERE 'sport' IN r.influence_areas
WITH *, relationships(p) AS relations 
RETURN [relation IN relations | [startNode(relation), (relation), endNode(relation)]] as data

# Filter for influence scores
MATCH (n) 
MATCH (m) 
MATCH p=(n)-[r]->(m) 
WHERE 0 <= toInteger(r.all_influence_score) <= 10
WITH *, relationships(p) AS relations 
RETURN [relation IN relations | [startNode(relation), (relation), endNode(relation)]] as data 

# All paths between to nodes by name
MATCH (n {name: 'User G'})
MATCH (m {name: 'User F'})
MATCH p=(n)-[:Influences*..]->(m)
WITH *, relationships(p) AS relations
RETURN [relation IN relations | [startNode(relation), (relation), endNode(relation)]] as data

# Shortest path between to nodes by name
MATCH (n {name: 'User G'})
MATCH (m {name: 'User B'})
MATCH p=shortestPath((n) - [:Influences* ..] -> (m))
WITH *, relationships(p) AS relations 
RETURN [relation IN relations | [startNode(relation), (relation), endNode(relation)]] as data

# graph density, centrality, and all other measures
?